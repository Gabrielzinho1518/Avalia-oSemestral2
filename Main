package Avaliacao;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Scanner;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        Scanner teclado = new Scanner(System.in);
        String fone;
        String nome;
        String apelido;
        String dataNascimento;
        int pontuacaoAcumulada;

        HashSet<Atleta> hashAtleta = new HashSet<Atleta>();
        System.out.println("Digite o numero de atletas que deseja cadastrar: ");
        int atletas = teclado.nextInt();
        teclado.nextLine();
        for (int i = 0; i < atletas; i++) {
            System.out.println("Fone: ");
            fone = teclado.nextLine();
            System.out.println("Nome: ");
            nome = teclado.nextLine();
            System.out.println("Apelido: ");
            apelido = teclado.nextLine();
            System.out.println("Data de nascimento: ");
            dataNascimento = teclado.nextLine();
            System.out.println("Pontuacao acumulada: ");
            pontuacaoAcumulada = teclado.nextInt();
            teclado.nextLine();
            System.out.println("Atleta com esse telefone já cadastrado!");
            if (!hashAtleta.add(new Atleta(fone, nome, apelido, dataNascimento, pontuacaoAcumulada))) {
            }
        }
        List<Atleta> listaOrdenada = hashAtleta.stream()
                .sorted(Comparator.comparingInt(Atleta::getPontuacaoAcumulada).reversed())
                .collect(Collectors.toList());


        for (Atleta atleta : listaOrdenada) {
            System.out.println(atleta);
        }

        System.out.println("Deseja remover algum atleta? \nDigite 1 para sim e 2 para não:");
        int op = teclado.nextInt();
        teclado.nextLine();
        if (op == 2) {
            salvarDados(listaOrdenada);
            return;
        }

        while (op != 2) {
            System.out.println("Digite o número de telefone do atleta que deseja remover:");
            String telefoneRemover = teclado.nextLine();

            boolean removido = hashAtleta.removeIf(atleta -> atleta.getFone().equals(telefoneRemover));

            if (removido) {
                System.out.println("Atleta removido com sucesso.");
            } else {
                System.out.println("Atleta não encontrado.");
            }
            System.out.println("Deseja remover mais algum atleta? \nDigite 1 para sim e 2 para não:");
            op = teclado.nextInt();
            teclado.nextLine();
        }

        listaOrdenada = hashAtleta.stream()
                .sorted(Comparator.comparingInt(Atleta::getPontuacaoAcumulada).reversed())
                .collect(Collectors.toList());

        for (Atleta atleta : listaOrdenada) {
            System.out.println(atleta);
        }

        salvarDados(listaOrdenada);
    }

    private static void salvarDados(List<Atleta> listaOrdenada) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("atletas.csv"))) {
            writer.write("Fone,Nome,Apelido,Data de Nascimento,Pontuação Acumulada\n");
            for (Atleta atleta : listaOrdenada) {
                writer.write(atleta.getFone() + "," + atleta.getNome() + "," + atleta.getApelido() + ","
                        + atleta.getDataNascimento() + "," + atleta.getPontuacaoAcumulada() + "\n");
            }
            System.out.println("Dados salvos com sucesso em atletas.csv");
        } catch (IOException e) {
            System.err.println("Erro ao escrever arquivo CSV: " + e.getMessage());
        }
    }
}
